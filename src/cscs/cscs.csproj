<?xml version="1.0" encoding="utf-8"?>
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net5.0</TargetFramework>
    <AssemblyName>cscs</AssemblyName>
    <RootNamespace>CSScripting</RootNamespace>
    <StartupObject />
    <Version>2.0.0.0</Version>
    <Authors>Oleg Shilo</Authors>
    <Product>CS-Script</Product>
    <Copyright>(C) 2004-2021 Oleg Shilo</Copyright>
    <Description>C# Script engine .NET Core executable</Description>
    <PackageLicenseUrl></PackageLicenseUrl>
    <PackageProjectUrl>https://github.com/oleg-shilo/cs-script.core</PackageProjectUrl>
    <PackageIconUrl></PackageIconUrl>
    <RepositoryUrl>https://github.com/oleg-shilo/cs-script.core</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <PackageTags>C# script dynamic</PackageTags>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <FileVersion>2.0.0.0</FileVersion>
    <PackageReleaseNotes>CLI
- New commands:
	- `-server` - for managing build server 
	- `-vscode` - to open script in VSCode
	- `-vs` - to script project in Visual Studio
	- `-self-test` - for testing the engine on the target system
	- `-self-exe` - for building css launcher for manual deployment
	- `-engine:&lt;csc|dotnet&gt;`
	- `-new:toplevel` - CLI parameter
	- `-profile` - for testing script loading performance
	- `-speed` - for compiler performance testing
- Added css 
- Added creation of `code.header` on first use of CLI command `-code`
- Added complex (multi-file) commands support (e.g. css -self-test-run)
- Implemented build server
- Implemented hot-loading for csc engine.
- Normalized all \n and \r\n CLI output by using Environment.NewLine
- Added reporting using of incompatible csc compiler for scripts requiring XAML compilation  

CSScriptLib
- Implemented //css_winapp for WinForm and WPF applications
- Added //css_engine (//css_ng) directive for choosing the compiling engine
- Completed CSScript.Evaluator.CodeDom interface.
- Implemented transparent hosting of CSScriptLib in .NET-Framework and .NET-Core
- Removed dependency on Roslyn for pure CodeDom evaluator use-case
- added sample with downloading the latest C# compiler
- added passing compiler options
- Implemented probing for default C#5 compiler when hosted on .NET Framework.
- Extending u-testing to cover new Evaluator features (CSScriptLib.dll)</PackageReleaseNotes>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageIcon>css_logo.png</PackageIcon>
    <ApplicationIcon>css_logo.ico</ApplicationIcon>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <WarningLevel>3</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <DefineConstants>TRACE</DefineConstants>
  </PropertyGroup>
  <Target Name="PostBuild" AfterTargets="PostBuildEvent">
    <Exec Command="md &quot;$(ProjectDir)..\css\bin\$(ConfigurationName)&#xD;&#xA;&#xD;&#xA;copy &quot;$(TargetPath)&quot; &quot;$(ProjectDir)..\css\bin\$(ConfigurationName)\$(TargetName).dll&#xD;&#xA;copy &quot;$(TargetDir)cscs.exe&quot; &quot;$(ProjectDir)..\css\bin\$(ConfigurationName)\$(TargetName).exe&#xD;&#xA;copy &quot;$(TargetDir)cscs.runtimeconfig.json&quot; &quot;$(ProjectDir)..\css\bin\$(ConfigurationName)\cscs.runtimeconfig.json&quot;&#xD;&#xA;" />
  </Target>
  <ItemGroup>
    <Compile Remove="GACHelper.cs" />
    <Compile Remove="Services.Roslyn.cs" />
  </ItemGroup>
  <ItemGroup>
    <None Include="..\logo\css_logo.png">
      <Pack>True</Pack>
      <PackagePath></PackagePath>
    </None>
    <None Include="Services.Roslyn.cs" />
  </ItemGroup>
  <ItemGroup>
    <Compile Update="Properties\Resources.Designer.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
  </ItemGroup>
  <ItemGroup>
    <EmbeddedResource Update="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
      <CustomToolNamespace>CSScripting</CustomToolNamespace>
    </EmbeddedResource>
  </ItemGroup>
  <Target Name="PreBuild" BeforeTargets="PreBuildEvent"></Target>
</Project>